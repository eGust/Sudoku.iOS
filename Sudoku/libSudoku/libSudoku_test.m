//
//  libSudoku_test.m
//  Sudoku
//
//  Created by Chen Xi on 14/12/27.
//  Copyright (c) 2014å¹´ Chen Xi. All rights reserved.
//

#import "libSudoku_test.h"

UInt8 TestData[][81] = {
    {0,0,0,0,0,0,0,1,0,9,5,0,0,6,0,4,7,0,6,1,0,0,0,0,5,0,0,0,9,3,2,0,4,0,0,1,5,2,0,0,0,3,0,0,8,4,8,1,0,0,0,0,2,0,0,6,7,0,0,0,1,9,0,0,0,0,0,0,0,0,0,7,0,3,0,5,0,1,8,0,0},
    {7,0,1,0,6,4,0,5,0,0,0,4,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,8,4,0,5,9,1,3,0,0,9,3,0,6,8,7,0,2,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,8,2,4,0,9,5,2,0,0,0,1,0,0},
    {0,7,4,0,0,0,0,8,0,0,0,8,9,0,0,0,5,0,0,6,0,0,0,1,0,9,0,3,0,0,0,8,4,0,0,2,2,0,6,3,0,0,0,0,0,0,5,0,0,9,0,0,0,4,0,0,0,0,6,5,0,0,0,0,0,3,0,0,0,9,4,0,0,0,0,0,0,0,1,7,0},
    {0,0,0,0,6,9,0,0,0,1,0,0,0,0,3,0,2,8,5,6,0,0,0,0,9,0,3,0,0,5,0,1,7,0,0,0,0,7,0,0,2,6,8,1,0,2,0,0,0,0,0,7,0,0,0,0,0,0,0,1,0,8,0,7,0,0,0,4,2,1,0,0,4,0,9,0,7,0,0,0,6},
    {7,3,0,0,6,0,0,8,0,0,0,0,0,0,3,2,0,0,8,0,0,0,4,5,0,6,0,6,0,0,8,0,0,0,2,0,0,0,0,0,5,1,0,4,0,0,1,2,0,0,0,0,0,0,3,0,0,5,2,0,7,0,0,4,5,0,0,0,7,9,0,2,0,0,0,0,0,0,6,0,4},
    {0,0,0,0,0,0,0,1,0,0,5,0,0,0,0,8,0,7,1,0,7,9,0,3,0,6,2,4,0,6,8,3,7,5,0,0,0,1,0,0,0,5,0,0,0,0,7,0,4,1,0,0,0,6,2,6,0,7,0,0,0,0,3,0,0,0,3,2,0,0,0,0,0,9,0,0,0,4,2,0,0},
    {4,0,5,6,0,0,9,3,1,9,0,6,4,0,0,0,2,8,1,0,0,0,0,2,6,0,0,8,0,0,7,0,0,3,0,0,0,0,0,5,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,5,0,0,0,6,0,0,0,0,9,2,4,3,2,0,3,0,0,4,0,8,0},
    {2,0,6,0,0,0,0,0,0,0,0,7,0,3,8,0,0,9,5,0,9,7,0,0,4,3,0,0,0,0,0,0,5,0,0,0,0,1,0,9,0,0,7,6,0,0,0,2,0,0,4,0,8,0,0,0,0,3,9,2,5,0,0,7,2,0,5,0,6,0,1,0,0,0,0,0,1,0,0,0,0},
    {0,6,0,0,0,0,4,0,0,0,0,7,3,4,1,5,0,0,2,0,4,6,0,8,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,2,9,0,0,0,0,3,8,0,0,7,0,6,9,0,4,0,0,0,0,0,8,0,0,0,0,0,8,0,4,3,6,0,0,0,0,0,0,0,1,7,0},
    {7,0,0,0,0,0,6,9,4,0,2,5,4,0,0,0,0,0,6,0,8,0,0,1,3,2,5,2,0,0,0,0,0,8,4,0,4,0,0,3,0,0,9,0,6,5,0,0,0,0,0,0,3,0,0,0,0,0,6,5,2,0,9,1,0,0,0,0,2,0,0,0,0,6,0,0,0,3,0,0,0},
    
    {0,9,0,7,0,0,0,4,3,1,0,0,0,0,0,9,0,0,0,0,7,4,8,0,0,0,0,0,8,0,0,0,0,0,0,9,0,5,0,0,1,2,0,6,0,7,0,0,0,0,0,0,0,0,0,0,5,1,0,8,0,0,2,0,1,4,0,5,7,0,0,0,0,0,0,3,9,0,0,0,1},
};


void    dbgPrintSudoku(SudokuData *const sd)
{
    char buffer[] = "| . . . | . . . | . . . |\n", *spliter = "|-------+-------+-------|\n";
    for (int r = 0; r < 9; r++) {
        for (int c = 0; c < 9; c++) {
            char d = sd->rows[r][c];
            buffer[2+c*2+c/3*2] = d ? '0' + d : '.';
        }
        
        NSLog(@"%s", buffer);
        if (r < 8 && r % 3 == 2) {
            NSLog(@"%s", spliter);
        }
    }
}

void    dbgTestSolve()
{
    NSLog(@"%@", @"test solve");
    int len = sizeof(TestData)/sizeof(TestData[0]);
    for (int i = 0; i < len; i++) {
        SudokuData sd = CreateSudoku(TestData[i]);
        NSLog(@"%@.", @(i));
        dbgPrintSudoku(&sd);
        NSLog(@"%@", @"=========================\n");
        
        bool solved = SolveSudoku(&sd);
        dbgPrintSudoku(&sd);
        NSLog(@"%@", @"=========================\n");
        NSLog(@"%@ %@\n\n", @(solved), @(CheckSudokuStatus(&sd, false)));
    }
}

void    dbgTestCrossing()
{
    NSLog(@"%@", @"test generate");
    for (int i = 0; i < 5; i++) {
        NSLog(@"%@.", @(i));
        SudokuData sd = GenerateSudoku();
        dbgPrintSudoku(&sd);
        NSLog(@"%@", @"=========================\n");
        
        CrossSudoku(&sd, NULL, NULL);
        dbgPrintSudoku(&sd);
        NSLog(@"%@", @"=========================\n");
        NSLog(@": %@\n\n", @(CheckSudokuStatus(&sd, true)));
    }
}
